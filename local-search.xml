<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>找工作必刷经典算法总结</title>
    <link href="/2025/01/25/%E6%89%BE%E5%B7%A5%E4%BD%9C%E5%BF%85%E5%88%B7%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <url>/2025/01/25/%E6%89%BE%E5%B7%A5%E4%BD%9C%E5%BF%85%E5%88%B7%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>经典面试算法总结,方便以后回来时不时回来看看复习</p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bubble_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[],<span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> flag=<span class="hljs-number">1</span>;<span class="hljs-comment">//算法优化,如果剩下的数已经有序了就不用在遍历 </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len<span class="hljs-number">-1</span>&amp;&amp;flag==<span class="hljs-number">1</span>;i++)<span class="hljs-comment">//外层循环遍历每一个数 内层循环选出每轮最小/大的数 </span><br>&#123;<br>flag=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;len<span class="hljs-number">-1</span>-i;j++)<span class="hljs-comment">//排除最后已经排好的数字 </span><br>&#123;<br><span class="hljs-keyword">if</span>(arr[j]&gt;arr[j<span class="hljs-number">+1</span>])<br>&#123;<br>flag=<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> temp=arr[j];<br>arr[j]=arr[j<span class="hljs-number">+1</span>];<br>arr[j<span class="hljs-number">+1</span>]=temp;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//flag的意义是设定一个检查看是否剩下未排序的数已经有序,如果已经有</span><br><span class="hljs-comment">//序就不用在进行后续遍历了,是算法优化. </span><br></code></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//算法思想:分治(划分)</span><br><span class="hljs-comment">//快排先划分排序在递归(整体到局部)  归并排序先递归在排序(局部到整体) </span><br><span class="hljs-comment">//快排取数组数字 归并取数组的下标即位置 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(l&gt;=r)<span class="hljs-comment">//头尾重合则递归结束返回 </span><br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<span class="hljs-comment">//还要+1的原因是防止取到索引0处 </span><br><span class="hljs-type">int</span> x=a[(l+r<span class="hljs-number">+1</span>)/<span class="hljs-number">2</span>];<span class="hljs-comment">//在数组中随便取一个数即可不一定是中间</span><br><span class="hljs-comment">//一定要考虑好边界问题:哪些值可以取哪些值不能取 这种情况是不能取x为索引为0处即和l重合的索引 要不然</span><br><span class="hljs-comment">//会陷入死循环 </span><br><span class="hljs-type">int</span> i=l<span class="hljs-number">-1</span>,j=r<span class="hljs-number">+1</span>;<span class="hljs-comment">//双指针指向头尾 </span><br><span class="hljs-keyword">while</span>(i&lt;j)<span class="hljs-comment">//注意条件是用指针判断大小 不是l&lt;r判断 </span><br>&#123;<br><span class="hljs-comment">//两个指针从头尾开始遍历 不是一起动而是先动其中一个然后遇到不满足情况的时候卡住然后等待</span><br><span class="hljs-comment">//另一个移动直到另一个卡住然后交换两个指针所指的数字 </span><br><span class="hljs-comment">//左边:当前指针满足小于数x继续移动直到不满足卡住等待另一端</span><br><span class="hljs-comment">//右边: 当前指针满足大于数x 不满足卡住和左指针交换即可 </span><br><span class="hljs-keyword">do</span><br>&#123;<br>i++; <span class="hljs-comment">//指针i正向遍历 </span><br> &#125; <span class="hljs-keyword">while</span>(a[i]&lt;x);<br> <span class="hljs-keyword">do</span><br>&#123;<br>j--; <span class="hljs-comment">//指针j反方向遍历 </span><br> &#125; <span class="hljs-keyword">while</span>(a[j]&gt;x);<br> <span class="hljs-comment">//注意条件是用指针判断大小 不是l&lt;r判断 </span><br> <span class="hljs-keyword">if</span>(i&lt;j) <span class="hljs-built_in">swap</span>(a[i],a[j]);<span class="hljs-comment">//等于的情况即是原地交换不变 然后两指针继续重复上述步骤 </span><br> &#125; <br> <span class="hljs-built_in">quick_sort</span>(a,l,i<span class="hljs-number">-1</span>);<span class="hljs-comment">//对小于x和大于x的两侧进行递归 </span><br> <span class="hljs-built_in">quick_sort</span>(a,i,r);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//归并排序 算法思想:分治(递归) </span><br><span class="hljs-comment">//快排先划分排序在递归(整体到局部)  归并排序先递归在排序(局部到整体) </span><br><span class="hljs-comment">//快排取数组数字 归并取数组的下标即位置 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(l&gt;=r) <span class="hljs-keyword">return</span>;<br><span class="hljs-type">int</span> mid=(l+r)/<span class="hljs-number">2</span>;<span class="hljs-comment">//取中间 </span><br><span class="hljs-comment">//先递归在排序 </span><br><span class="hljs-built_in">merge_sort</span>(a,l,mid);<span class="hljs-comment">//不能取(l,mid-1) </span><br><span class="hljs-built_in">merge_sort</span>(a,mid<span class="hljs-number">+1</span>,r); <span class="hljs-comment">//不能取(mid,r) </span><br><br><span class="hljs-type">int</span> i=l,j=mid<span class="hljs-number">+1</span>;<span class="hljs-comment">//两个指针 </span><br><span class="hljs-type">int</span> p=<span class="hljs-number">0</span>;<span class="hljs-comment">//临时数组的下标指向 </span><br><span class="hljs-keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)&#123; <span class="hljs-comment">//注意考虑好边界问题 什么时候</span><br><span class="hljs-keyword">if</span>(a[i]&lt;=a[j]) tmp[p++]=a[i++];<span class="hljs-comment">//把小的存入新的临时数组 </span><br><span class="hljs-keyword">else</span> tmp[p++]=a[j++];<br>&#125;<br><span class="hljs-keyword">while</span>(i&lt;=mid)tmp[p++]=a[i++];<span class="hljs-comment">//把剩下的没有挪入的挪入tmp </span><br><span class="hljs-keyword">while</span>(j&lt;=r)tmp[p++]=a[j++];<span class="hljs-comment">//不是小于mid是小于r</span><br><span class="hljs-keyword">for</span>(i=l,j=<span class="hljs-number">0</span>;i&lt;=r;i++,j++)<span class="hljs-comment">//注意边界</span><br>&#123;<br>a[i]=tmp[j];<span class="hljs-comment">//把临时数组(已经排好序)赋给原数组 </span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br></code></pre></td></tr></table></figure><h3 id="以上是基础排序算法总结-下面是经典题目总结"><a href="#以上是基础排序算法总结-下面是经典题目总结" class="headerlink" title="以上是基础排序算法总结,下面是经典题目总结"></a>以上是基础排序算法总结,下面是经典题目总结</h3><h3 id="二叉树前序遍历递归法"><a href="#二叉树前序遍历递归法" class="headerlink" title="二叉树前序遍历递归法"></a>二叉树前序遍历递归法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; res;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(TreeNode* root)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>;<br><br>res.<span class="hljs-built_in">push_back</span>(root-&gt;val);<br>        <span class="hljs-built_in">func</span>(root-&gt;left);<br>        <span class="hljs-built_in">func</span>(root-&gt;right);<br>    &#125;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-built_in">func</span>(root);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二叉树前序遍历迭代法"><a href="#二叉树前序遍历迭代法" class="headerlink" title="二叉树前序遍历迭代法"></a>二叉树前序遍历迭代法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; res;<br>        stack&lt;TreeNode*&gt; st;<br>        <span class="hljs-keyword">while</span>(root != <span class="hljs-literal">NULL</span> || !st.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-keyword">while</span>(root != <span class="hljs-literal">NULL</span>)<br>            &#123;<br>                res.<span class="hljs-built_in">push_back</span>(root-&gt;val);<br>                st.<span class="hljs-built_in">push</span>(root);<br>                root = root-&gt;left;<br>            &#125;<br>            root = st.<span class="hljs-built_in">top</span>();<br>            st.<span class="hljs-built_in">pop</span>();<br>            root = root-&gt;right;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二叉树中序遍历递归法"><a href="#二叉树中序遍历递归法" class="headerlink" title="二叉树中序遍历递归法"></a>二叉树中序遍历递归法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; res;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(TreeNode* root)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-built_in">func</span>(root-&gt;left);<br>        res.<span class="hljs-built_in">push_back</span>(root-&gt;val);<br>        <span class="hljs-built_in">func</span>(root-&gt;right);<br>    &#125;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-built_in">func</span>(root);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二叉树中序遍历迭代法"><a href="#二叉树中序遍历迭代法" class="headerlink" title="二叉树中序遍历迭代法"></a>二叉树中序遍历迭代法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; res;<br>        stack&lt;TreeNode*&gt; st;<br>        <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>() || root != <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            <span class="hljs-keyword">while</span>(root != <span class="hljs-literal">NULL</span>)<br>            &#123;<br>                st.<span class="hljs-built_in">push</span>(root);<br>                root = root-&gt;left;<br>            &#125;<br>            root = st.<span class="hljs-built_in">top</span>();<br>            st.<span class="hljs-built_in">pop</span>();<br>            res.<span class="hljs-built_in">push_back</span>(root-&gt;val);<br>            root = root-&gt;right;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二叉树后序遍历递归法"><a href="#二叉树后序遍历递归法" class="headerlink" title="二叉树后序遍历递归法"></a>二叉树后序遍历递归法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; res;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(TreeNode* root)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-built_in">func</span>(root-&gt;left);<br>        <span class="hljs-built_in">func</span>(root-&gt;right);<br>res.<span class="hljs-built_in">push_back</span>(root-&gt;val);<br>    &#125;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-built_in">func</span>(root);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二叉树后序遍历迭代法"><a href="#二叉树后序遍历迭代法" class="headerlink" title="二叉树后序遍历迭代法"></a>二叉树后序遍历迭代法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">postorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; res;<br>        stack&lt;TreeNode*&gt; st;<br>        TreeNode* pre = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">while</span>(root != <span class="hljs-literal">NULL</span> || !st.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-keyword">while</span>(root != <span class="hljs-literal">NULL</span>)<br>            &#123;<br>                st.<span class="hljs-built_in">push</span>(root);<br>                root = root-&gt;left;<br>            &#125;<br>            root = st.<span class="hljs-built_in">top</span>();<br>            st.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">if</span>(root-&gt;right == <span class="hljs-literal">NULL</span> || root-&gt;right == pre)<span class="hljs-comment">//判断是否走过</span><br>            &#123;<br>                res.<span class="hljs-built_in">push_back</span>(root-&gt;val);<br>                pre = root;<span class="hljs-comment">//标记为已经走过</span><br>                root =<span class="hljs-literal">NULL</span>;<span class="hljs-comment">//避免重复</span><br>            &#125;<span class="hljs-keyword">else</span><br>            &#123;<br>                st.<span class="hljs-built_in">push</span>(root);<br>                root = root-&gt;right;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二叉树中的路径最大和"><a href="#二叉树中的路径最大和" class="headerlink" title="二叉树中的路径最大和"></a>二叉树中的路径最大和</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//很经典的一个递归学习题</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-type">int</span> res = INT_MIN;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">func</span><span class="hljs-params">(TreeNode* root)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">int</span> path1 = <span class="hljs-built_in">func</span>(root-&gt;left);<br>        <span class="hljs-type">int</span> path2 = <span class="hljs-built_in">func</span>(root-&gt;right);<br><br>        <span class="hljs-keyword">if</span>(path1 &lt; <span class="hljs-number">0</span>) path1 = <span class="hljs-number">0</span>;<span class="hljs-comment">//如果是负数当然不要</span><br>        <span class="hljs-keyword">if</span>(path2 &lt; <span class="hljs-number">0</span>) path2 = <span class="hljs-number">0</span>;<br><br>        res = <span class="hljs-built_in">max</span>(res,path1 + path2 + root-&gt;val);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(path1 + root-&gt;val,path2 + root-&gt;val);<br>    &#125;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxPathSum</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">func</span>(root);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//递归如何去理解其思维顾名思义，即要“递”又要“归”，那如何理解这句话呢</span><br><span class="hljs-comment">// 递归首先我理解的概念是原问题可以细分成一个个子问题然后解决子问题根据子问题返回的答案来解决原问题</span><br><span class="hljs-comment">// 下面是递归思路：</span><br><span class="hljs-comment">// “递”即怎么去分解原问题成子问题即“递”-&gt;一步步去分解直到触发边界条件</span><br><span class="hljs-comment">// “归”即每次分解然后处理完子问题计算完的问题答案需要返回什么给原问题来解决原问题即“归”</span><br><span class="hljs-comment">// 最后要注意的就边界条件了及其返回值了</span><br><span class="hljs-comment">// 把以上每步搞懂再加上数学归纳法写出来的递归就不会有问题</span><br><span class="hljs-comment">// 注：递归过程中千万不要想过程是什么发生了什么很容易把自己绕进去，只需假设你已经知道这层递归的返回值或答案了，假设很重要！其他不要多想</span><br></code></pre></td></tr></table></figure><h3 id="leetcode84-柱状图中最大的矩形-hard"><a href="#leetcode84-柱状图中最大的矩形-hard" class="headerlink" title="leetcode84.柱状图中最大的矩形:hard"></a>leetcode84.柱状图中最大的矩形:hard</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">largestRectangleArea</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; heights)</span> </span>&#123;<br>        stack&lt;<span class="hljs-type">int</span>&gt; st;<br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        heights.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">-1</span>);<span class="hljs-comment">//哨兵监测</span><br>        st.<span class="hljs-built_in">push</span>(<span class="hljs-number">-1</span>);<span class="hljs-comment">//依旧哨兵;</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> r = <span class="hljs-number">0</span>;r &lt; heights.<span class="hljs-built_in">size</span>();++r)<br>        &#123;<br>            <span class="hljs-keyword">while</span>(st.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; heights[r] &lt; heights[st.<span class="hljs-built_in">top</span>()])<br>            &#123;<br>                <span class="hljs-type">int</span> i = st.<span class="hljs-built_in">top</span>();<br>                st.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-type">int</span> l = st.<span class="hljs-built_in">top</span>();<br>                res = <span class="hljs-built_in">max</span>(res,heights[i] * (r - l - <span class="hljs-number">1</span>));<br>            &#125;<br>            st.<span class="hljs-built_in">push</span>(r);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//这道题我认为最优雅的地方就是两个哨兵的设立了,从而不用特判了</span><br><span class="hljs-comment">//另外从这道题里面也悟出来一些关于单调栈的道理,其实不用去纠结是用单调增/减栈,因为看待的角度不同即有可能是增也有可能是减</span><br><span class="hljs-comment">//比如说每个人认为的单调增的定义不同:从栈口到栈底的递增也是递增但是反过来从栈底到栈口的增也是递增所以此时</span><br><span class="hljs-comment">//递增有可能也是递减(因为换了个方向) 所以我不建议去记递增的定义容易记错或者记混,容易把题意整个顺序搞反浪费时间</span><br><span class="hljs-comment">//所以我建议遇到题的时候现场举例判断即可:把满足条件的加入栈然后如果遇到不满足条件的加入栈破环单调性了,</span><br><span class="hljs-comment">//此时观察加入的数字破坏了怎样的单调性,如果递增的好好的突然加入的一个数字破坏了单调性那么这个数字就是你想找的同时这道题也应该用增栈</span><br><span class="hljs-comment">//递减同理</span><br></code></pre></td></tr></table></figure><h3 id="leetcode121-买卖股票的最佳时机-easy"><a href="#leetcode121-买卖股票的最佳时机-easy" class="headerlink" title="leetcode121.买卖股票的最佳时机:easy"></a>leetcode121.买卖股票的最佳时机:easy</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices)</span> </span>&#123;<br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> min_num = prices[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i : prices)<br>        &#123;<br>            res = <span class="hljs-built_in">max</span>(res,i - min_num);<br>            min_num = <span class="hljs-built_in">min</span>(min_num,i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="leetcode763-划分字母区间-medium"><a href="#leetcode763-划分字母区间-medium" class="headerlink" title="leetcode763.划分字母区间:medium"></a>leetcode763.划分字母区间:medium</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">partitionLabels</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; res;<br>        <span class="hljs-type">int</span> dic[<span class="hljs-number">26</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; s.<span class="hljs-built_in">size</span>();++i)<br>        &#123;<br>            dic[s[i] - <span class="hljs-string">&#x27;a&#x27;</span>] = i;<span class="hljs-comment">//记录字母最后的下标</span><br>        &#125;<br>        <span class="hljs-type">int</span> begin = <span class="hljs-number">0</span> , end = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; s.<span class="hljs-built_in">size</span>();++i)<br>        &#123;<br>            end = <span class="hljs-built_in">max</span>(end,dic[s[i] - <span class="hljs-string">&#x27;a&#x27;</span>]);<span class="hljs-comment">//记录一段区间可以保持的末尾</span><br>            <span class="hljs-keyword">if</span>(end == i)<br>            &#123;<br>                res.<span class="hljs-built_in">push_back</span>(end - begin + <span class="hljs-number">1</span>);<br>                begin = i + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//这道题本质上是区间合并</span><br></code></pre></td></tr></table></figure><h3 id="leetcode55-跳跃游戏1-medium"><a href="#leetcode55-跳跃游戏1-medium" class="headerlink" title="leetcode55.跳跃游戏1:medium"></a>leetcode55.跳跃游戏1:medium</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">canJump</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> max_n = <span class="hljs-number">0</span>;<span class="hljs-comment">//记录最远能到的边界的下标</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; nums.<span class="hljs-built_in">size</span>();++i)<span class="hljs-comment">//或max_n &lt; nums.size() - 1</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(max_n &lt; i) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            max_n = <span class="hljs-built_in">max</span>(max_n,i + nums[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="leetcode45-跳跃游戏2-medium"><a href="#leetcode45-跳跃游戏2-medium" class="headerlink" title="leetcode45.跳跃游戏2:medium"></a>leetcode45.跳跃游戏2:medium</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">jump</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> next_step = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> cur_step = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;++i)<br>        &#123;<br>            next_step = <span class="hljs-built_in">max</span>(next_step,i + nums[i]);<br>            <span class="hljs-keyword">if</span>(cur_step == i)<span class="hljs-comment">//注意是等于不是小于,因为本道题以及确定能到达n-1所以一定有解所以等于的时候就要更新</span><br>            &#123;<br>                cur_step = next_step;<br>                res++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//空间换时间 利用next_step记录来减小时间复杂度</span><br></code></pre></td></tr></table></figure><h3 id="leetcode198-打家劫舍-medium"><a href="#leetcode198-打家劫舍-medium" class="headerlink" title="leetcode198.打家劫舍:medium"></a>leetcode198.打家劫舍:medium</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rob</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(nums.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(n + <span class="hljs-number">1</span>,<span class="hljs-number">0</span>)</span></span>;<br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        dp[<span class="hljs-number">1</span>] = nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>;i &lt;= n;++i)<br>        &#123;<br>            dp[i] = <span class="hljs-built_in">max</span>(dp[i - <span class="hljs-number">1</span>],dp[i - <span class="hljs-number">2</span>] + nums[i - <span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[n];<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//动态规划实际上可以简单理解为带记忆搜索的回溯 用dp数组在记忆 动态规划的关键就是搞清动态转化方程和dp数组是记录什么的</span><br></code></pre></td></tr></table></figure><h3 id="leetcode279-完全平方数-medium"><a href="#leetcode279-完全平方数-medium" class="headerlink" title="leetcode279.完全平方数:medium"></a>leetcode279.完全平方数:medium</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">numSquares</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(n + <span class="hljs-number">1</span>,<span class="hljs-number">99999</span>)</span></span>;<br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j * j &lt;= i;++j)<span class="hljs-comment">//注意边界条件</span><br>            &#123;<br>                dp[i] = <span class="hljs-built_in">min</span>(dp[i],dp[i - j * j] + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[n];<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//初始化dp数组的时候不要初始化为INT_MAX在进行dp数组计算的时候会越界 初始化为一个案例到不了的数值就可以</span><br><span class="hljs-comment">//动态规划的题里面注意边界条件</span><br></code></pre></td></tr></table></figure><h3 id="leetcode322-零钱兑换-medium"><a href="#leetcode322-零钱兑换-medium" class="headerlink" title="leetcode322.零钱兑换:medium"></a>leetcode322.零钱兑换:medium</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">coinChange</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; coins, <span class="hljs-type">int</span> amount)</span> </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(amount + <span class="hljs-number">1</span>,<span class="hljs-number">99999</span>)</span></span>;<br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= amount;++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; coins.<span class="hljs-built_in">size</span>();++j)<br>            &#123;<br>                <span class="hljs-type">int</span> tmp = i - coins[j];<br>                <span class="hljs-keyword">if</span>(tmp &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<span class="hljs-comment">//判断当前硬币是否可取 不可取直接跳过本次尝试(即本次for循环)</span><br>                dp[i] = <span class="hljs-built_in">min</span>(dp[i],dp[tmp] + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[amount] == <span class="hljs-number">99999</span> ? <span class="hljs-number">-1</span> : dp[amount];<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//最后返回答案的时候判断一下是否可行 如果不行就返回-1</span><br><span class="hljs-comment">//因为这道题和上题很像就不多说了 底层几乎是一样的</span><br></code></pre></td></tr></table></figure><h3 id="leetcode139-单词拆分-medium"><a href="#leetcode139-单词拆分-medium" class="headerlink" title="leetcode139.单词拆分:medium"></a>leetcode139.单词拆分:medium</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">wordBreak</span><span class="hljs-params">(string s, vector&lt;string&gt;&amp; wordDict)</span> </span>&#123;<br>        <span class="hljs-function">unordered_set&lt;string&gt; <span class="hljs-title">st</span><span class="hljs-params">(wordDict.begin(),wordDict.end())</span></span>;<br>        <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(n + <span class="hljs-number">1</span>,<span class="hljs-literal">false</span>)</span></span>;<br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; i;++j)<span class="hljs-comment">//这个循环代表的意思是不断寻找可行的划分点 如果找到的就直接退出即可</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>(dp[j] &amp;&amp; st.<span class="hljs-built_in">contains</span>(s.<span class="hljs-built_in">substr</span>(j,i - j)))<br>                &#123;<br>                    dp[i] = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[n];<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//本道题写完就觉得动态规划的题越来越像递归回溯类型的题了 底层基本上都是一样的</span><br><span class="hljs-comment">//本题dp数组存储的是前i个字符串是否可以拼凑出来</span><br></code></pre></td></tr></table></figure><h3 id="leetcode300-最长递增子序列-medium"><a href="#leetcode300-最长递增子序列-medium" class="headerlink" title="leetcode300.最长递增子序列:medium"></a>leetcode300.最长递增子序列:medium</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//动态规划解法:</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lengthOfLIS</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(n,<span class="hljs-number">0</span>)</span></span>;<span class="hljs-comment">//本道题为啥不用n+1初始化见下方解释</span><br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; i;++j)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(nums[j] &lt; nums[i])<br>                &#123;<br>                    dp[i] = <span class="hljs-built_in">max</span>(dp[i],dp[j]);<span class="hljs-comment">//状态转化方程,dp数组代表的意思是当前为止最长递增子序列是多少</span><br>                &#125;<br>            &#125;<br>            dp[i]++;<br>            res = <span class="hljs-built_in">max</span>(res,dp[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//时间复杂度:O(n^2) 空间复杂度:O(n)</span><br><span class="hljs-comment">//这道题能用动态规划也是很阴间了,感觉就是硬凑还不如暴力</span><br><span class="hljs-comment">//关于初始化用n还是n+1的选择:</span><br><span class="hljs-comment">//前者代表的意思是n型DP（元素结尾 DP）(即下标为n的位置记录的答案是啥,和最终答案没有关联,dp[i] 表示以第i个元素结尾的最优解)dp数组的下标和nums的下标直接对应 最终答案不一定在最后一个dp元素,可能在中间。</span><br><span class="hljs-comment">//后者代表的意思是n+1型DP（前缀 DP）(即前n位的最优解,和最终答案有关联(一步步算出答案放在dp数组最后一位),dp[i]表示前i个元素的最优解) dp数组和nums数组的下标对应差一位,因为是递推所以通常最后一位就是所求的答案</span><br><span class="hljs-comment">//本道题是第一种情况所以要用n初始化 且dp最后一位不一定是最终答案 所以要一边遍历一边记录答案</span><br><br><br><span class="hljs-comment">//贪心+二分解法</span><br></code></pre></td></tr></table></figure><h3 id="leetcode152-乘积最大子数组-medium"><a href="#leetcode152-乘积最大子数组-medium" class="headerlink" title="leetcode152.乘积最大子数组:medium"></a>leetcode152.乘积最大子数组:medium</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProduct</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span>(n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> res = nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> max_n = nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> min_n = nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt; n;++i)<br>        &#123;<br>            <span class="hljs-type">int</span> tmp = max_n;<br>            max_n = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">max</span>(nums[i],nums[i] * max_n),min_n * nums[i]);<span class="hljs-comment">//状态转移方程</span><br>            min_n = <span class="hljs-built_in">min</span>(<span class="hljs-built_in">min</span>(nums[i],tmp * nums[i]),min_n * nums[i]);<span class="hljs-comment">//状态转移方程</span><br>            res = <span class="hljs-built_in">max</span>(res,max_n);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//这道题写完又可以学到了很多新的点:</span><br><span class="hljs-comment">//不一定所有的动态规划都是有dp数组的,状态转移方程不一定只有一个有可能是有多个,初始化不一定是0/1/INT_MAX/INT_MIN还有可能是数组的第一位用作初始化</span><br><span class="hljs-comment">//在本道题中for一定不能从0开始遍历因为下标0已经被用来拿在初始化了如果再次使用会重复计算增大结果,另外本道题需要两个状态转移方程因为最终结果不一定就在最大值那里也有可能在最小值那因为是乘法最小值有可能突变为最大值所以需要两个状态转移方程</span><br><span class="hljs-comment">//本道题怎么保证计算出的就一定是有序子数组而不是无序的子集:因为每遍历到一个位置计算出的结果不是比这个位置上的数字大就是小,所以当前位置一定会归属到一边(max_n/min_n)所以既然当前位置一定有归属就代表当前位置纳入了子数组的序列所以一定是连续的,可以理解为&quot;因为我们每次计算的 maxProd、minProd都只考虑了以当前元素结尾的连续子数组，没有跳过任何元素，所以天然保证了连续性&quot;</span><br></code></pre></td></tr></table></figure><h3 id="leetcode416-分割等和子集-medium"><a href="#leetcode416-分割等和子集-medium" class="headerlink" title="leetcode416.分割等和子集:medium"></a>leetcode416.分割等和子集:medium</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">canPartition</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;++i)<br>        &#123;<br>            sum += nums[i];<br>        &#125;<br>        <span class="hljs-keyword">if</span>(sum % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">int</span> target = sum / <span class="hljs-number">2</span>;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(n + <span class="hljs-number">1</span>,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(target + <span class="hljs-number">1</span>)); <br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;++i)<br>        &#123;<br>            <span class="hljs-type">int</span> x = nums[i];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt;=target;++j)<br>            &#123;<br>                dp[i + <span class="hljs-number">1</span>][j] = (j &gt;= x &amp;&amp; dp[i][j-x]) || dp[i][j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[n][target];<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//初次写01背包的题只能说是真的不好想也不好写而且怎么转化为01背包也不好想,本道题看了很多题解也问了很多ai都还是不理解最后还是看灵神才理解的只能说灵神yyds,讲的太巧妙太通俗易懂了</span><br><span class="hljs-comment">//这道题通过初始化的方式巧妙避免边界条件很巧妙</span><br><span class="hljs-comment">//写完这道题对于动态规划和递归还有01背包有了新的认识:这三者其实是一类,递归式是先递再归所以很复杂而动态规划和背包则是用数组记录递然后直接归省了很多资源,另外递归如何去想在动态规划里也同样适用即假设已经知道答案了然后去求解,另外动态规划可以理解为&quot;特殊暴力遍历&quot;或&quot;优化版本的暴力遍历&quot;</span><br></code></pre></td></tr></table></figure><h3 id="leetcode136-只出现一次的数字-easy"><a href="#leetcode136-只出现一次的数字-easy" class="headerlink" title="leetcode136.只出现一次的数字:easy"></a>leetcode136.只出现一次的数字:easy</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">singleNumber</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> res = nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt; nums.<span class="hljs-built_in">size</span>();++i)<br>        &#123;<br>            res ^= nums[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//异或的用法:异或具有交换律以及两个一样的数字异或等于0所以用res异或一圈下来最后最后res保存的那个数字就是答案</span><br></code></pre></td></tr></table></figure><h3 id="leetcode169-多数元素-easy"><a href="#leetcode169-多数元素-easy" class="headerlink" title="leetcode169.多数元素:easy"></a>leetcode169.多数元素:easy</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">majorityElement</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> res = nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> hp = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt; nums.<span class="hljs-built_in">size</span>();++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(nums[i] == res) hp++;<br>            <span class="hljs-keyword">else</span> hp--;<br><br>            <span class="hljs-keyword">if</span>(hp == <span class="hljs-number">0</span>) res = nums[i + <span class="hljs-number">1</span>];<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//本道题第一遍是用map写出来的 为了优化空间复杂度写出来了这种算法 算法核心就是&quot;比武&quot;</span><br></code></pre></td></tr></table></figure><h3 id="leetcode32-最长有效括号-hard"><a href="#leetcode32-最长有效括号-hard" class="headerlink" title="leetcode32.最长有效括号:hard"></a>leetcode32.最长有效括号:hard</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">longestValidParentheses</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(n,<span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt; n;++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;)&#x27;</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(s[i - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;(&#x27;</span>)<br>                &#123;<br>                   dp[i] = <span class="hljs-number">2</span> + (i<span class="hljs-number">-2</span> &lt; <span class="hljs-number">0</span> ? <span class="hljs-number">0</span> : dp[i - <span class="hljs-number">2</span>]);<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-type">int</span> tmp = i - dp[i - <span class="hljs-number">1</span>];<br>                    <span class="hljs-keyword">if</span>(tmp &gt;= <span class="hljs-number">1</span> &amp;&amp; s[tmp - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;(&#x27;</span>)<br>                    &#123;<br>                        dp[i] = <span class="hljs-number">2</span> + dp[i - <span class="hljs-number">1</span>] + (tmp - <span class="hljs-number">2</span> &lt; <span class="hljs-number">0</span> ? <span class="hljs-number">0</span> : dp[tmp - <span class="hljs-number">2</span>]); <br>                    &#125;<br>                &#125;<br>            &#125;<br>            res = <span class="hljs-built_in">max</span>(res,dp[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//终于结束了,刷完了hot100最后一道hard题也是一个比较难的题了,算是我们能接触到的动态规划里比较难的一道题了,下面就好好说说我的思路:</span><br><span class="hljs-comment">//首先这道题的dp数组定义就很抽象:不能定义成下标i之前最大的连续子串是多少,要定义成以索引i结尾的最长有效括号长度.两者虽然看似算出来的结果都一样但是实际上计算机算出的结果是不同的,前者我们靠脑子虽然可以算出答案但是在计算机推到的过程中中间会&#x27;断层&#x27;也就是无法地推出后面的结果,因为前者存储的是全局最大值,所以中间会卡掉推不出后面只是我们的大脑跳跃性很强自动忽略了这个.但是后者记录的是局部最大值,所以中间不会出现&#x27;断层&#x27;的想象可以顺利的推导出结果</span><br><span class="hljs-comment">//其次说下大体的思路:当遍历到一个位置的时候先看这个位置是什么,如果是&#x27;(&#x27;就不用说了直接跳过记为0即可,如果是&#x27;)&#x27;-&gt;进一步继续判断前一位是&#x27;(&#x27;还是&#x27;)&#x27;,如果是&#x27;(&#x27;,就加上往前两位那个位置的长度即dp[i - 2](注意判断边界)然后+2.如果是&#x27;)&#x27;就代表当前遍历到的位置前面已经是有效连续括号了所以我们要跳过这段再到前面不连续的部分找有没有&#x27;(&#x27;和当前位置的&#x27;)&#x27;匹配即 i - dp[i - 1] - 1位置是啥,如果不是&#x27;(&#x27;就不用管跳过就好,如果是则再进一步-&gt;加上这个位置前一位的有效长度即的dp[tmp - 2](注意边界)然后+2然后再加上跳过的那一部分长度.这就是一轮,之后记录每轮用一个全局max来记录最大值即为答案</span><br><span class="hljs-comment">//简化一下上面所讲可以当作总结:本道题思路就是查看当前遍历到的括号能不能和前一位配对如果可以就再加上前面紧接着的连续的有效长度,如果配对不上就在跳过前面连续的部分查看是否有配对的括号,如果有就接上连续的部分....总而言之题目是求最大有效长度,那么我们遍历到一个位置就不断向前查看是否还有连续的括号可以接上直到中间发生断层,即这一部分就算是dp[i]的答案了,然后统计遍历出所有dp位置的最大值就是答案(注意此处的逻辑要区分清楚很容易搞混)(把总而言之后面这句话翻译成程序语言并且主意好边界条件就算正确的算法答案了)</span><br><span class="hljs-comment">//另外这道题不用担心遇到&#x27;(&#x27;怎么办,不会也算入到有效括号了吗 答案肯定不算入的,因为就算遇到了在对于下标出的dp数组中设立的也是0所以就算加上这个位置的有效数组也是相当于没有加,所以不用担心</span><br></code></pre></td></tr></table></figure><h3 id="leetcode75-颜色分类-medium"><a href="#leetcode75-颜色分类-medium" class="headerlink" title="leetcode75.颜色分类:medium"></a>leetcode75.颜色分类:medium</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sortColors</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> zero = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> one = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//两个变量的意思是维护0/1区间的最后一位</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; nums.<span class="hljs-built_in">size</span>();++i)<br>        &#123;<br>            <span class="hljs-type">int</span> x = nums[i];<br>            nums[i] = <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(x &lt;= <span class="hljs-number">1</span>)<br>            &#123;<br>                nums[one] = <span class="hljs-number">1</span>;<br>                one++;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(x == <span class="hljs-number">0</span>)<br>            &#123;<br>                nums[zero] = <span class="hljs-number">0</span>;<br>                zero++;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//说实话这道本来都打算叠if-else了结果去看了眼灵神的题解,太优雅了</span><br></code></pre></td></tr></table></figure><h3 id="leetcode62-不同路径-medium"><a href="#leetcode62-不同路径-medium" class="headerlink" title="leetcode62.不同路径:medium"></a>leetcode62.不同路径:medium</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">uniquePaths</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(m + <span class="hljs-number">1</span>,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n + <span class="hljs-number">1</span>,<span class="hljs-number">0</span>));<br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= m;++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j &lt;= n;++j)<br>            &#123;<br>                dp[i][j] = dp[i][j - <span class="hljs-number">1</span>] + dp[i - <span class="hljs-number">1</span>][j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[m][n];<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//很经典的二维dp</span><br></code></pre></td></tr></table></figure><h3 id="leetcode31-下一个排列-medium"><a href="#leetcode31-下一个排列-medium" class="headerlink" title="leetcode31.下一个排列:medium"></a>leetcode31.下一个排列:medium</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">nextPermutation</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br><br>        <span class="hljs-type">int</span> i = n - <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">while</span>(i &gt;= <span class="hljs-number">0</span> &amp;&amp; nums[i] &gt;= nums[i + <span class="hljs-number">1</span>])<br>        &#123;<br>            i--;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(i &gt;= <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(j &lt; n &amp;&amp; nums[j] &gt; nums[i])<br>            &#123;<br>                j++;<br>            &#125;<br>            <span class="hljs-built_in">swap</span>(nums[i],nums[j - <span class="hljs-number">1</span>]);<br>        &#125;<br>        <br>        <span class="hljs-built_in">reverse</span>(nums.<span class="hljs-built_in">begin</span>() + i + <span class="hljs-number">1</span>,nums.<span class="hljs-built_in">end</span>());<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//这道题边界条件微微有一些麻烦,但是举特例一步步试就好了</span><br><span class="hljs-comment">//题解还是要看灵神的,太优雅和通俗易懂了,算法思路很清晰</span><br></code></pre></td></tr></table></figure><h3 id="leetcode64-最小路径和-medium"><a href="#leetcode64-最小路径和-medium" class="headerlink" title="leetcode64.最小路径和:medium"></a>leetcode64.最小路径和:medium</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minPathSum</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = grid.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> m = grid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(n + <span class="hljs-number">1</span>,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(m + <span class="hljs-number">1</span>,INT_MAX));<br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j &lt;= m;++j)<br>            &#123;<br>                dp[i][j] = <span class="hljs-built_in">min</span>(dp[i - <span class="hljs-number">1</span>][j],dp[i][j - <span class="hljs-number">1</span>]) + grid[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>                <span class="hljs-comment">//注意此处的grid数组下标不要写成i,j不然会越界因为我们扩展的只是dp数组原数组还是不变所以下标对应要差一位</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[n][m];<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//另外再次强调一下拿到题不要看着眼熟或者和其他题很相似就一上来直接开始写很容易卡到中间,拿到题一定要先分析清楚再写代码</span><br></code></pre></td></tr></table></figure><h3 id="leetcode287-寻找重复数-medium"><a href="#leetcode287-寻找重复数-medium" class="headerlink" title="leetcode287.寻找重复数:medium"></a>leetcode287.寻找重复数:medium</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findDuplicate</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> slow = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> fast = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>((slow == <span class="hljs-number">0</span> &amp;&amp; fast == <span class="hljs-number">0</span> )|| slow != fast)<br>        &#123;<br>            slow = nums[slow];<br>            fast = nums[nums[fast]];<br>        &#125;<br>        fast = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(slow != fast)<br>        &#123;<br>            slow = nums[slow];<br>            fast = nums[fast];<br>        &#125;<br>        <span class="hljs-keyword">return</span> fast;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//很无语想了半天没想到最优解结果一看题解就是环形链表换了个皮肤............</span><br></code></pre></td></tr></table></figure><h3 id="leetcode5-最长回文子串-medium"><a href="#leetcode5-最长回文子串-medium" class="headerlink" title="leetcode5.最长回文子串:medium"></a>leetcode5.最长回文子串:medium</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-type">int</span> max_l = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> max_r = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;++i)<br>        &#123;<br>            <span class="hljs-type">int</span> l = i,r = i;<br>            <span class="hljs-keyword">while</span>(l &gt;= <span class="hljs-number">0</span> &amp;&amp; r &lt; n &amp;&amp; s[l] == s[r])<br>            &#123;<br>                l--;<br>                r++;<br>            &#125;<br>            l++,r--;<span class="hljs-comment">//记得复原回去,走完循环会多加一步</span><br>            <span class="hljs-keyword">if</span>(r - l + <span class="hljs-number">1</span> &gt; max_r - max_l + <span class="hljs-number">1</span>)<br>            &#123;<br>                max_l = l;<br>                max_r = r;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;++i)<br>        &#123;<br>            <span class="hljs-type">int</span> l = i,r = i + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(l &gt;= <span class="hljs-number">0</span> &amp;&amp; r &lt; n &amp;&amp; s[l] == s[r])<br>            &#123;<br>                l--;<br>                r++;<br>            &#125;<br>            l++,r--;<br>            <span class="hljs-keyword">if</span>(r - l + <span class="hljs-number">1</span> &gt; max_r - max_l + <span class="hljs-number">1</span>)<br>            &#123;<br>                max_l = l;<br>                max_r = r;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> s.<span class="hljs-built_in">substr</span>(max_l,max_r - max_l + <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//本道题和判断是否为回文串的方法稍有不同</span><br><span class="hljs-comment">//要区分回文子串的中心是单数还是双数,相当于数学里的分类讨论,挨个求一次然后统计出最大的结果就是答案</span><br></code></pre></td></tr></table></figure><h3 id="leetcode1143-最长公共子序列-medium"><a href="#leetcode1143-最长公共子序列-medium" class="headerlink" title="leetcode1143.最长公共子序列:medium"></a>leetcode1143.最长公共子序列:medium</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">longestCommonSubsequence</span><span class="hljs-params">(string text1, string text2)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = text<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> m = text<span class="hljs-number">2.</span><span class="hljs-built_in">size</span>();<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(n + <span class="hljs-number">1</span>,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(m + <span class="hljs-number">1</span>));<br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j &lt;= m;++j)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(text1[i - <span class="hljs-number">1</span>] == text2[j - <span class="hljs-number">1</span>])<br>                &#123;<br>                    dp[i][j] = dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    dp[i][j] = <span class="hljs-built_in">max</span>(dp[i - <span class="hljs-number">1</span>][j],dp[i][j - <span class="hljs-number">1</span>]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[n][m];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="leetcode72-编辑距离-medium"><a href="#leetcode72-编辑距离-medium" class="headerlink" title="leetcode72.编辑距离:medium"></a>leetcode72.编辑距离:medium</h3><p>(其实是hard只不过被大家刷下来了….太恐怖了…)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minDistance</span><span class="hljs-params">(string word1, string word2)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = word<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> m = word<span class="hljs-number">2.</span><span class="hljs-built_in">size</span>();<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(n + <span class="hljs-number">1</span>,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(m + <span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt;= n;++i)<br>        &#123;<br>            dp[i][<span class="hljs-number">0</span>] = i;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt;= m;++i)<br>        &#123;<br>            dp[<span class="hljs-number">0</span>][i] = i;<br>        &#125;<br>        <span class="hljs-comment">//因为多初始化了一行和一列记得初始化(初始化不是随便初始化的而是根据dp数组的含义初始化)</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j &lt;= m;++j)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(word1[i - <span class="hljs-number">1</span>] == word2[j - <span class="hljs-number">1</span>])<br>                &#123;<br>                    dp[i][j] = dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    dp[i][j] = <span class="hljs-built_in">min</span>(<span class="hljs-built_in">min</span>(dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>],dp[i - <span class="hljs-number">1</span>][j]),dp[i][j - <span class="hljs-number">1</span>]) + <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[n][m];<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//关键点:dp[i - 1][j - 1]表示替换操作  dp[i - 1][j]表示删除操作  dp[i][j - 1]表示插入操作</span><br><span class="hljs-comment">// 解释下为什么dp[i-1,j]到dp[i,j]是对应的删除操作，而dp[i,j-1]到dp[i,j]对应的是插入操作。</span><br><span class="hljs-comment">// 首先必须明确的是dp[i,j]表示的是： 源字符串前i个字符，变成和目标字符串前j个字符一模一样需要的编辑次数。</span><br><span class="hljs-comment">// 那么已知dp[i-1,j]=n，求dp[i,j]，意思是：已知原字符串前i-1个字符通过n次编辑可以和目标字符串前j个字符一模一样。求求dp[i,j]。</span><br><span class="hljs-comment">// 现在原字符串前进一位从i-1跑到i，这时要和目标字符串前j个字符一样，那么必须对跑到位置i的源字符串做一次删除操作，才能使得源字符串退回到i-i位置，这时他俩才能又一模一样</span><br><span class="hljs-comment">//这一点想一辈子我也想不出来(解释是我搬运题解评论区的)</span><br><span class="hljs-comment">//这道题dp数组的含义是:dp[i][j]代表word1中前i个字符变换到word2中前j个字符,最短需要操作的次数</span><br></code></pre></td></tr></table></figure><h3 id="leetcode1-两数之和-easy"><a href="#leetcode1-两数之和-easy" class="headerlink" title="leetcode1.两数之和:easy"></a>leetcode1.两数之和:easy</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; mp;<br>        <span class="hljs-comment">//空间换时间用哈希表记录</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; nums.<span class="hljs-built_in">size</span>();++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(mp.<span class="hljs-built_in">contains</span>(target - nums[i])) <span class="hljs-keyword">return</span> &#123;mp[target - nums[i]],i&#125;;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                mp[nums[i]] = i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//梦开始的地方,加油坚持下去!</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>c++</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>健身随谈(持续更新)</title>
    <link href="/2024/12/11/%E5%81%A5%E8%BA%AB%E9%9A%8F%E8%B0%88/"/>
    <url>/2024/12/11/%E5%81%A5%E8%BA%AB%E9%9A%8F%E8%B0%88/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h1><p>我是从2024年3月3日开始健身的,写这个文章的目的是把自己从健身到现在走过坑和所有的健身计划和个人感受分享给大家,以及随着我的年限增加我也会及时修改我这个文章里不太正确的观点,我会随着我所学习到的东西及时更新和修改文章.</p><p>关于我个人的详细训练计划和动作我会放在第五章去分享</p><p>此文章仅是分享,不是指导和建议,根据自身仅供参考(也是我的一个复盘和记录),整篇文章如果提到任何产品或商品或博主无广,只是个人觉得好做推荐.</p><h1 id="第一部分训练思路"><a href="#第一部分训练思路" class="headerlink" title="第一部分训练思路:"></a>第一部分训练思路:</h1><h5 id="这一部分的内容我认为是最重要的东西-俗话说的好-健身先健脑-想要有一个好的健身反馈就要有一个好的-适合自己的训练思路"><a href="#这一部分的内容我认为是最重要的东西-俗话说的好-健身先健脑-想要有一个好的健身反馈就要有一个好的-适合自己的训练思路" class="headerlink" title="这一部分的内容我认为是最重要的东西,俗话说的好,健身先健脑,想要有一个好的健身反馈就要有一个好的,适合自己的训练思路"></a>这一部分的内容我认为是最重要的东西,俗话说的好,健身先健脑,想要有一个好的健身反馈就要有一个好的,适合自己的训练思路</h5><p>首先我先说的是也是最重要的就是我的训练思路,我认为健身是服务于生活的,所以生活是最主要的健身是次要的,所以我不会急于求成再加上我认为健身最好的天赋不是肌肉和力量增长的有多么快而是可以一直保持不受伤稳定的进步和不影响生活,所以在这里想要告诉大家的是不要急于求成,越着急越容易受伤越没有想要的回报.</p><p>再者,健身既然是服务于生活的,两者的主次不能颠倒,生活和身体健康是第一位.尽管有很多人想练出很大的肌肉但是真的健康吗</p><p>我的训练方式会尽可能的选择复合式动作(如果你是0基础健身小白(我指的是完完全全没有运动习惯的人群,哪怕你有一点的运动习惯都可以直接开始作复合动作)先不用遵循这个原则先去看第二部分),第一点复合动作它可以调集全身大部分肌肉共同发力和孤立训练往往相反,会有很多的溢出效应比如说三大项(杠铃深蹲,杠铃卧推,杠铃硬拉).第二点复合运动也代表着高风险高收益,这一点就表明我们不能盲目上重量和冲重量一定要在安全和自己能够承受的范围内去练复合动作,不要被身边的训练小伙伴’蛊惑’冲重量,无论什么训练计划和思路安全永远是第一位而且复合动作受的伤往往都是很严重,不可逆,伴随一生的,所以一定要很慎重.</p><h1 id="第二部分关于开始健身"><a href="#第二部分关于开始健身" class="headerlink" title="第二部分关于开始健身:"></a>第二部分关于开始健身:</h1><p>首先我是不推荐小白(无运动习惯)直接去健身房的,刚刚开始在家做做俯卧撑和卷腹(类似这种的变式也可以)即可,先积累一点力量和肌肉还有关节强度再去健身房健身,要不然刚刚开始没有运动基础很容易受伤,在家运动大概一个月左右的时间就可以去健身房了.步入健身房之后就像我第一部分所说的那样不要一开始就练太难的复合型动作(比如说:实力推,硬拉,杠铃划船)因为很容易受伤的,杠铃卧推和杠铃深蹲这类黄金动作还是可以慢慢练的,但是刚刚开始我推荐先做孤立器械先练上一阵子比如说1个月左右时间然后再把重心调整到三大项或者复合型动作,即把中心放在孤立器械上把孤立器械的相关训练当作主项,而复合动作在这一阶段去放到次要,在这一阶段重在打好良好的动作习惯和正确发力习惯之后在上重量,如果一开始就没有好的习惯和动作后面上了重量很容易会受伤而且到那时候想改也相对不容易了.</p><p>大家应该都听说过新手福利期,每个人的长短都不同,我的新手福利期大概有6个月左右.之所以提这个的原因是大家千万不能有一种心里’趁着新手福利期多练练累一点也无所谓或者盲目冲重量’,这个念头显然是错误的,只要你新手福利期保持不受伤你就可以进步飞快,因为我在福利期手腕受过两次小伤影响了有一段时间的训练但是好在伤病不严重很快的恢复过来了然后想明白了这个道理只后就会很小心的慢慢增加重量,之后再也没受过伤.所以大家如果可以不受伤肯定进步要比我快很多不用纠结于新手福利期是否要把自己逼那么累.心急吃不了热豆腐.</p><h1 id="第三部分关于补给"><a href="#第三部分关于补给" class="headerlink" title="第三部分关于补给:"></a>第三部分关于补给:</h1><h1 id="第四部分关于训练分化"><a href="#第四部分关于训练分化" class="headerlink" title="第四部分关于训练分化:"></a>第四部分关于训练分化:</h1><h1 id="第五部分关于训练伤病"><a href="#第五部分关于训练伤病" class="headerlink" title="第五部分关于训练伤病:"></a>第五部分关于训练伤病:</h1><p>首先本部分不做任何的医学参考,只是个人的经验和建议</p><p>我个人是没有受过什么大伤的,只是在健身初期的时候为了虚荣心推哑铃卧推手腕受过两次伤(应该不是tfcc但是手腕左右转还是会疼 前后不会疼),再者就是腰有时候还是会不舒服但是基本上不是健身影响的,是我平时坐姿和久坐导致的.</p><p>我个人认为受伤可以分为两个因素我(生活 训练)一个个来说:</p><p>生活方面:生活其实是导致我们受伤的主要因素,因为我平时大部分时间肯定不是在健身,所以生活中大部分的不良习惯会慢慢积累让我们体态发生变化从而某些部位代偿越来越严重导致埋下了一棵定时炸弹.</p><p>训练方面:我们大多数受伤肯定都是在训练中发生的,我们也肯定会认为是训练导致的,其实是平时生活中不良的习惯积少成多导致的,在某一次训练中也许因为我们的虚荣心或者没有敬畏那个重量从而受伤,总结一下伤病就像一个炸弹随时可能会爆发,生活中的不良习惯就像是引线(不良习惯越多引线越短),训练中的不敬畏重量就像是打火机一下点燃了那个引线从而炸弹爆炸导致我们受伤.</p><p>那么有没有什么方法不受伤?<br>我认为是没有,那么我们做那些辅助训练还有什么用呢?当然是有用的,这些辅助训练和只是延长了引线大大降低了我们受伤的概率,但是仅仅只是概率降低了,只要概率存在就会发生,如果我们在一次训练中没有敬畏重量那么小概率的事情也是会发生,所以我要做到辅助训练的同时也要敬畏重量,这就相当于做了双层保险了,想受伤也会很难了.</p><p>如果已经受伤了要怎么康复?</p><h1 id="第六部分三大项"><a href="#第六部分三大项" class="headerlink" title="第六部分三大项:"></a>第六部分三大项:</h1><p>之所以把三大项单独拿出来说是因为它真的太太太重要了,三大项练的好的人其他项目绝对不烂但是反之就不一定了,而且三大项的溢出效应也是很高的,但是相对其他动作来说会稍微危险一点,但是永远都是高风险高收益如果你有需求或者希望进步快可以试着在训练里加入三大项(以安全为第一的前提下,动作一定要规范)<br>三大项刚刚开始训练的时候不要着急加重 一开始先把动作基础打好 三大项的动作永远都不会标准的需要随时改正和自己打磨 我的动作也不标准</p><p>三大项的共同点:<br>三大项永远不是靠爆发提升的而是靠稳定和一步步来才能提升的,总而言之 大家一定要建立起做动作有步骤的意识 一步一步来 ,简单来说就是要有意识和思维意识按照步骤一步步来,想好下一步 做完这一步就不要去想上一步</p><h3 id="深蹲"><a href="#深蹲" class="headerlink" title="深蹲:"></a>深蹲:</h3><p>首先先讲一下深蹲的本质,深蹲的本质就是身体和上肢和下肢对抗作用再加上力从上半身传到到下半身,一步步来<br>步骤:<br>1.</p><p>注意事项(这些要点都是我训练时犯过的错):<br>1.一定要全程注意力集中不要思想抛锚,脑子里时时刻刻注意要点(很多受伤都是因为注意力没有集中导致的目标集群松懈然后受伤)</p><p>2.大腿全程保持张力,下降到底端的时候大腿不要松懈,蹲到幅度后不要停顿(如果你想提高深蹲成绩可以训练底端暂停深蹲)顺势起来(做连贯)(我经常下降起来的时候做不连贯底部都要微微停顿一下,也就是力的传导不连贯 断层了,我最近才纠正过来 因为我发现我在底端大腿会松懈一下然后才发力)</p><p>3.蹲到底端起来的时候不仅要做到第二条的连贯顺势,还要一点要注意在底端起来的时候不要先抬臀(伤腰),可以臀发力但是主要还是以腿发力为主一定要注意力集中让腿部集中发力(我很长一段时间一上大重量就尾巴骨那部分疼不知道原因,但是当我意识到我在底端没有以腿发力为主导再加上注意力没有放在腿上和先抬臀导致剪切力很大(主要还是注意力没有放在腿上思想抛锚了,所以说注意力集中真的很重要)导致腰和尾巴骨那部分疼,我改掉这个问题之后就好了很多)</p><h3 id="卧推"><a href="#卧推" class="headerlink" title="卧推:"></a>卧推:</h3><h3 id="硬拉"><a href="#硬拉" class="headerlink" title="硬拉:"></a>硬拉:</h3><p>首先先讲一下硬拉的本质,硬拉的本质是上肢(特别是背部)和下肢或杆子产生对抗,再加上把力从上肢传递到脚</p><h1 id="第七部分关于训练计划和训练动作详细思路分享"><a href="#第七部分关于训练计划和训练动作详细思路分享" class="headerlink" title="第七部分关于训练计划和训练动作详细思路分享:"></a>第七部分关于训练计划和训练动作详细思路分享:</h1><h3 id="胸部训练"><a href="#胸部训练" class="headerlink" title="胸部训练:"></a>胸部训练:</h3><h3 id="肩部训练"><a href="#肩部训练" class="headerlink" title="肩部训练:"></a>肩部训练:</h3><h3 id="腿部训练"><a href="#腿部训练" class="headerlink" title="腿部训练:"></a>腿部训练:</h3><h3 id="背部训练"><a href="#背部训练" class="headerlink" title="背部训练:"></a>背部训练:</h3><h3 id="腹部and核心训练"><a href="#腹部and核心训练" class="headerlink" title="腹部and核心训练:"></a>腹部and核心训练:</h3><h3 id="手臂训练"><a href="#手臂训练" class="headerlink" title="手臂训练:"></a>手臂训练:</h3><h3 id="有氧"><a href="#有氧" class="headerlink" title="有氧:"></a>有氧:</h3><h3 id="关于拉伸和关节灵活性"><a href="#关于拉伸和关节灵活性" class="headerlink" title="关于拉伸和关节灵活性:"></a>关于拉伸和关节灵活性:</h3><h1 id="第八部分关于饮食"><a href="#第八部分关于饮食" class="headerlink" title="第八部分关于饮食:"></a>第八部分关于饮食:</h1><p>首先饮食的上需要知道最基本的点是:我们人体需要的物质基本上是,碳水化合物,蛋白质,脂肪,膳食纤维,维生素,矿物质(前三者是最基本的三大营养物质)<br>如果我们要调整体重基本上变化的就是碳水和脂肪的比例,比如说训练日我们需要直接能量供给此时碳水就能起到很好的作用所以我们在训练日选择相对高的碳水和相对低的脂肪,在休息日我们就要选择相对低的碳水和相对高的脂肪.比如说我个人在训练日就会吃到3-4倍每公斤体重自身重量的碳水(我68kg就会吃68*4g的碳水)脂肪会吃0.6-0.8倍每公斤体重,在休息日我会吃2-3倍每公斤体重的碳水和1倍每公斤体重的脂肪.至于蛋白质如果你有运动习惯我建议吃自身体重1.5-2倍如果没有就吃到1.2-1.5倍自身体重.</p><p>饮食对于疲劳管理也是很重要的一环可以帮助我们管理疲劳疲劳控制,所以我建议多吃一点抗炎抗氧化的食物,比如:蓝莓,vc,姜黄粉,黑胡椒粉,橄榄油,亚麻籽油,肉桂粉.另外睡前补充蛋白质和脂肪(胆固醇)也可以帮助我们恢复和促进睾酮分泌所以睡前可以选择吃点鸡蛋(一个很好的方法)还可以抗饿</p><p>这里在举例一下我日常的饮食:<br>休息日:早饭我会选择35g脱脂奶粉,适量咖啡,橄榄油,黑胡椒粉,肉桂粉,姜黄粉,一勺蛋白粉    午饭外面卖的那种简餐了      晚饭一般就是三鲜口味的麻辣烫+一碗米饭+适量芝麻酱     睡前一般就是3-4个鸡蛋<br>训练日:早饭我会选择35g脱脂奶粉,35g黑燕麦,适量咖啡,橄榄油,黑胡椒粉,肉桂粉,姜黄粉,一勺蛋白粉    午饭外面卖的那种简餐了      晚饭一般就是三鲜口味的麻辣烫+两碗米饭     睡前一般就是3-4个鸡蛋<br>从上面可以看出为了区分训练日和休息日的不同,在训练日我会多加一碗米饭和不加芝麻酱(增加碳水减小脂肪)和早饭的黑燕麦,在休息日我会只吃一碗米饭和加适量芝麻酱(减少碳水和增加脂肪)<br>(以上是我在学校里的饮食可以参考一下,后期应该还会写工作后自己一个人如何做饮食)</p><h1 id="第九部分关于休息and轻训周"><a href="#第九部分关于休息and轻训周" class="headerlink" title="第九部分关于休息and轻训周:"></a>第九部分关于休息and轻训周:</h1><h1 id="第十部分关于瓶颈期"><a href="#第十部分关于瓶颈期" class="headerlink" title="第十部分关于瓶颈期:"></a>第十部分关于瓶颈期:</h1><h1 id="第十一部分其他"><a href="#第十一部分其他" class="headerlink" title="第十一部分其他:"></a>第十一部分其他:</h1><p>这一部分不太好分类所以我就打算把能想到的都在这里写到(当然会在这里分类的)</p><h3 id="推荐的博主"><a href="#推荐的博主" class="headerlink" title="推荐的博主:"></a>推荐的博主:</h3><p>这一部分给大家分享一下我比较喜欢的博主,现在互联网时代我认为完全没有必要请私教,可以从网络上学到很多东西,这些博主我认为教的东西都很干,排名不分先后.</p><h5 id="凯圣王"><a href="#凯圣王" class="headerlink" title="凯圣王:"></a>凯圣王:</h5><p>不必多说,新手健身路上的必备老师,教的东西和每期视频都很干货,无论是理论知识还是实际都很干,涉及各个方面:训练,拉伸,热身,饮食…..他还出过三分化跟练视频,真的就是手把手健身了.</p><h5 id="自强不息归来"><a href="#自强不息归来" class="headerlink" title="自强不息归来:"></a>自强不息归来:</h5><p>这个博主也是健身多年的大佬,他视频讲的东西更贴近生活和普通人,饮食和训练方法也更大众化一些,包括他介绍的补给视频也很通俗易懂,他的视频风格我也很喜欢,教学视频也很长.</p><h5 id="叶先生爱健身"><a href="#叶先生爱健身" class="headerlink" title="叶先生爱健身"></a>叶先生爱健身</h5><h5 id="怪兽拖鞋战神"><a href="#怪兽拖鞋战神" class="headerlink" title="怪兽拖鞋战神"></a>怪兽拖鞋战神</h5><h5 id="力量矩阵"><a href="#力量矩阵" class="headerlink" title="力量矩阵"></a>力量矩阵</h5>]]></content>
    
    
    
    <tags>
      
      <tag>健身</tag>
      
      <tag>分享</tag>
      
      <tag>杂谈</tag>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>First blog,Hello!</title>
    <link href="/2024/12/01/hello-world/"/>
    <url>/2024/12/01/hello-world/</url>
    
    <content type="html"><![CDATA[<h3 id="大家好-第一次开始写博客来记录-决定记录一下自己的学习历程以及经验分享还有健身计划和经验分享-希望可以帮助大家-欢迎大家和我来一起讨论"><a href="#大家好-第一次开始写博客来记录-决定记录一下自己的学习历程以及经验分享还有健身计划和经验分享-希望可以帮助大家-欢迎大家和我来一起讨论" class="headerlink" title="大家好,第一次开始写博客来记录,决定记录一下自己的学习历程以及经验分享还有健身计划和经验分享,希望可以帮助大家,欢迎大家和我来一起讨论."></a>大家好,第一次开始写博客来记录,决定记录一下自己的学习历程以及经验分享还有健身计划和经验分享,希望可以帮助大家,欢迎大家和我来一起讨论.</h3><h1 id="———健身记录"><a href="#———健身记录" class="headerlink" title="———健身记录:"></a>———健身记录:</h1><p>欢迎大家随时来看我的<a href="https://v.douyin.com/iDQAgR6n/">抖音</a>和我一起讨论健身内容,有需要或者想问我的训练计划和思路方法的可以随时私信我,希望可以帮助到大家,免费,共勉!</p><h1 id="———学习记录"><a href="#———学习记录" class="headerlink" title="———学习记录:"></a>———学习记录:</h1><p>目前大二在校,会慢慢写博客来记录自己的学习路程以及当作笔记来回归,如果发现笔记中有<br>错误的小伙伴欢迎来找我指出<a href="https://github.com/kunkun0103">GIthub</a>,感谢大家.</p><h2 id="———初次见面到这里就结束了-希望可以在学习这条路上越走越远-同时希望帮助到更多人-共勉"><a href="#———初次见面到这里就结束了-希望可以在学习这条路上越走越远-同时希望帮助到更多人-共勉" class="headerlink" title="———初次见面到这里就结束了,希望可以在学习这条路上越走越远,同时希望帮助到更多人,共勉!"></a>———初次见面到这里就结束了,希望可以在学习这条路上越走越远,同时希望帮助到更多人,共勉!</h2>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
